NEXTFLOW CHANGE-LOG
===================

0.13.5 - 7 May 2015 
- Fixed issue #44 - Pipeline hangs when `map` operator is applied to a dataflow variable

0.13.4 - 4 May 2015
- Added html processes execution time report 
- Added support for Docker executable containers - Feature #33
- Added support for missing number types to CacheHelper
- Added warning message when using a deprecated input/output shared parameter
- Fixed issue causing process hangs when stdout+stderr is bigger than 64K when using local executor
- Fixed process stdout/stderr synchronisation issue
- Fixed race condition when accessing `processor` attribute - Issue #41
- Fixed race condition on processes registration/termination - See issue #43
- Fixed `echo` synchronisation strategy when writing to stdout
- Use a fixed thread pool for tasks execution and keep it separated from Gpars thread pool
- Do not set Gpars thread pool size along with nextflow pool size
- Improved resolution to tenths of a second when converting a `Duration` to string
- Removed unnecessary local scope map argument from `getTaskGlobalVars` method
- Read trace file w/o checking existence in order to reduce round-trip on remote storage
- Workaround for Groovy compiler issue GROOVY-7409

0.13.3 - 19 Apr 2015 
- Fixed issue when staging file when using a non local pipeline workdir
- Fixed invalid values in the trace file returned by `awk`
- Removed unnecessary `S3Path` serialiser registation on DnaNexus executor initialisation
- Updated S3 file system client to version 0.2.8g

0.13.2 - 16 Apr 2015
- Handle staging in the local process directory of files on remote/foreign file systems
- Fixed issue in resources stats tracing script  -- awk uses scientific notation for numbers instead of decimal format.
- Fixed external links to Groovy docs
- Fixed issue #40 -- Cannot find java binary on Mac OSX
- Fixed missing `DynamicParameter` in usage string
- Fixed docker run `â€”-cpuset` command line option when using `crg` executor

0.13.1 - 10 Apr 2015
- Fixed IllegalStateException when executing a script in Nextflow console

0.13.0 - 8 Apr 2015
- Added support for AWS S3 storage
- Added support for ClusterK Cirrus cloud scheduler
- Added multiple debugging level in command scripts by using `NXF_DEBUG` variable
- Added ability to disable docker kill command
- Added explicit `entrypoint` definition in docker run command
- Added `uge` executor as alias of SgeExecutor class
- Added `-D` JVM properties command line option
- Added `.command.log` to grid executors
- Separated `stdout` and `stderr` outputs
- Refactored DRMAA executor to a separate sub-project
- Refactored application packaging based on Capsule modes
- Refactored application installer downloading dependencies at runtime
- Optimised file attributes access usage
- Increased log and trace files rolling max index to 9
- Print revision and commit ID on pipeline startup
- Improved handling of docker cpuset for `crg` executor
- Improved TraceFileObserver to flush written content
- Improved `info <pipeline>` command with `-d` option that shows git revision commit IDs
- Fixed issue #39 - Per process containers not working with -with-docker option
- Upgraded Groovy runtime to version 2.3.11
- Upgraded Logback library to version 1.1.3

0.12.5 - 18 Mar 2015
- Fixed regression preventing jobs cleanup when nextflow process is killed
- Fixed issue when command line flag has not value making it to consume following option
- Added `uge` executor as alias of SgeExecutor class
- Improved log messages
- Upgraded Spock testing library to version 1.0

0.12.4 - 4 Mar 2015 
- Added suspended job status handling to SLURM executor -- Issue #36
- Added `print` and `println` operators plus tests and updated docs
- Fixed issue on `view` operator when specifying a closure
- Fixed Docker image resource request in CRG executor
- Fixed typo in documentation
- Improved task hash key generation and task variables handling
- Compute `baseDir` and `workDir` as string values when creating task unique hash
- Improved `sum` operator to allows it to handle lists with varying size
- Upgrading Groovy runtime to version 2.3.10

0.12.3 - 16 Feb 2015
- Added support for `module` and `container` fields in execution trace log
- Fixed a small inconsistency on polling monitor queue size for local executor when using single core or two-cores cpu
- Enhanced process key generation including global variables referenced in the process scope
- Enhanced `sum` operator and added `mean` operator

0.12.2 - 12 Feb 2015
- Fixed issue on some SGE implementation where `-terse` directive in job script is not working
- Downgrade Capsule to 0.9.0 due to an issue in version 0.10.0 - https://github.com/puniverse/capsule/issues/56

0.12.1 - 8 Feb 2015
- Fixed NoSuchMethodException issue on Java 1.7.0_01 due to missing private constructor
- Fixed logging issue on Nextflow console
- Fixed issue `view` operator which hung when used on a dataflow variable
- Upgrade SLF4J to version 1.7.10
- Upgrade Capsule to version 0.10.0
- Removed dependency on jsr166y module
- Removed `synchronized` declaration on Session cleanUp method

0.12.0 - 5 Jan 2015
- Added afterScript/beforeScript directives
- Added tag directive to label task executions with a custom identifier
- Added dynamic directives evaluation 
- Added support for dynamic input/output file names with closures 
- Added `ifEmpty` operator
- Added `view` operator
- Added `remainder` optional parameter to `phase` operator
- Removed 'undef' directive
- Refactored grid executors so that jobs directives are added on top of script wrapper
- Renamed ContextMap to TaskContext
- Renamed TaskConfig to ProcessConfig
- Renamed LocalConfig to TaskConfig
- Print pid/hostname in the status log
- Upgraded to Groovy 2.3.9 and Slf4j 1.7.8

0.11.4 - 3 Dec 2014 
- Fixed issue in TextFileCollector empty condition that was creating an empty split file
  when the split size was equals to the number or records
- Fixed bug that prevents a job is added to the polling queue when submit operation fails
- Added more strict checks on $JAVA_CMD executable and $JAVA_HOME folder
- Refactored 'sge' and 'crg' executors so that qsub directives are provided on top of job wrapper script
- Added BSC specific executor
- Upgraded to Groovy 2.3.8 

0.11.3 - 27 Nov 2014
- Added to splitters ability to save chunks to files
- Fixed a bug that prevented an error message to be reported when using a missing variable in the process script
- Improved info command showing local and remote branches
- Improved error report when failing to delete pipeline directory
- Removed gpars methods implicit imports
- Fixed unit for 'syscr' and 'syscw' fields in trace report
- Upgraded JGit library version to 3.5.2.201411120430-r

0.11.2 - 19 Nov 2014
- Added 'groupTuple' operator
- Added NXF_WORK variable to define default scratch path
- Added Gzip un-compress ability to splitter operators
- Added 'limit' parameter to splitter operators
- Added 'meta' parameter to splitter operators
- Field 'walltime' has been renamed to 'realtime' in tracing file
- Fixed issue on 'collectFile' operator when no 'name' parameter is specified
- Removed dependency on Picard library
- Improved error reporting

0.11.1 - 11 Nov 2014
- Fixed serialisation issue on pipeline resume
- Fixed issue on command line parameters with no arg (flag)
- Refactored class HubOptions to a trait

0.11.0 - 5 Nov 2014
- Added sorting ability to collectFile operator
- Added new 'cpus', 'memory', 'time', 'penv' process directives
- Added cpu, memory and I/O resources in execution tracing report
- Upgraded to groovy 2.3.7
- Relaxed validation check of -resume option
- Fixed symlink support to Github and BitBucket shared repositories
- Fixed Channel.fromPath with S3 path
- Enhanced error reporting
- Removed blanks from jobs name
- Added NXF_ASSEST environment variable
- Added NXF_TEMP environment variable to define local temporary path

0.10.3 - 3 Oct 2014
- Fixed bug when composing SLURM 'squeue' command line which was containing 
  unnecessary quote characters thus invalidating the jobs status check mechanism  

0.10.2 - 1 Oct 2014
- Fixed bug while submitting a job to SLURM scheduler due to special characters in job name
- Fixed bug in TaskConfig#toBool() method 
- Fixed bug resolving configuration file when pipeline script is a symlink
- Fixed bug while setting 'workDir' attribute on PBS job executor
- Improved error message when the name of a process is missing
- Removed TaskConfig#getMerge() method
- Updated method Channel.fromPath(String) so that it returns normalised absolute paths  
- Updated Capsule to version 0.9.0 stable
- Fixed typos in documentation

0.10.1 - 15 Sept 2014
- Added ability to 'run' implicitly a script when it's specified as the very first parameter (for backward compatibility)
- Added 'workDir' and 'baseDir' implicit variables in configuration files
- Fixed docker remove issue by executing as an external command
- Fixed an issue when finding the longest common path used by docker mounts
- Fixed issue #13 - Show a detailed error message when hitting GitHub rate limits

0.10.0 - 8 Sep 2014
- Added DRMAA executor 
- Added PBS/Torque executor
- Added processes execution report 
- Added Extrae tracing support
- Added support for GitHub private repositories
- Added integration for BitBucket hosted repositories (Git vcs only)
- Added native integration AWS S3 file system
- Improved Docker support and configuration 
- Improved GridGain cluster integration  
- Removed Hazelcast integration 
- Added Capsule based application packaging 
- Added commands 
        view: that prints the content a pipeline repository
        config: shows pipeline configuration
- Fixed issue #12 - Error resuming process with command defined on multiple lines
        
0.9.0 - 11 Aug 2014 
- Added GitHub/Git support. It allows one to pull and run pipelines published on a 
  remote GitHub repository 
- Changed command line structure. Since this version it is organised in sub-commands. 
  The following sub-commands are available:
      ls: list all downloaded pipelines; 
      run: launch a pipeline execution;
      pull: download or update a pipeline hosted on GitHub;
      info: show pipeline information; 
      drop: remote a locally stored pipeline; 
      clone: copy a pipeline to a directory specified;  
      history: list all pipeline runs;  
      help: show program help.
- Added 'baseDir' and 'workDir' script variables
- Removed Merge processor


0.8.5 - 3 Aug 2014 
- Upgraded to Groovy 2.3.6 
- Added '-noverify' to JVM launcher options as workaround for Java bug JDK-8051012

0.8.4 - 20 Jul 2014
- Upgrade to Groovy 2.3.4
- Fixed method Path.list()
- Added '-notify' option to SGE qsub command to handle killed jobs correctly

0.8.3 - 27 Jun 2014 
- Added support for Modules package maages
- Fixed issue #1 - process hung when only a parameter of type 'each' is defined
- Fixed issue #6 -- exception while resuming a process that declares a parametric file output name
- Fixed support for curly brackets glob path matching in Channel.fromPath
- Updated Groovy runtime to 2.3.3 
- Updated to Groovy-nio module in place of 'native' implementation

0.8.2 - 18 Jun 2014 
- Fixed issue #7 - NoClassDefFoundError HashMap$Entry exception with Java 8
- Enhanced launch script: removed '-Xms' Java option; verify the Java version coherent with JAVA_HOME definition; improved error messages.

0.8.1 - 26 May 2014
- Fixed a ConcurrentModificationException issue on splitXxx method due to a misused @Memoized annotation

0.8.0 - 24 May 2014
- Added support for Java 8
- Upgraded to Groovy 2.3.0
- Upgraded to Kryo 2.24.0
- New splitter operators: 'splitText', 'splitFasta', 'splitFastq', 'splitCsv'
- New operator 'collectFile' to gather file chunks
- New operator Channel.fromPath which allows fine control on paths traversal
- Operator Channel.from has been deprecated in favor of Channel.fromPath
- Operator Channel.watch has been deprecated in favor of Channel.watchPath
- Clean-up API for operators: 'into', 'choice', 'separate', 'filter'
- Operator 'grep' has been removed and features included in 'filter' operator
- Deprecated 'chopXxx' operators
- Deprecated 'chunkXxx' operators
- Deprecated 'each' operator in favor of 'subscribe'
- Deprecated process 'merge' directive
- Executor service now uses a fixed thread pool
- Fixed issue on 'maxForks' process directive
- Added 'info' cli parameter
- Improved documentation

0.7.3 - 16 May 2014
- Enhanced stability and errors reporting

0.7.2 - 5 May 2014
- Enhanced support for Docker containers:
  Now the current user id is added on the Docker command line
  and /tmp folder in the container is mounted on a temporary path in the host disk

0.7.1 - 14 Apr 2014
- Fixed an issue with 'scratch' directive i.e. Fixed issue when copying a symlink
- Added 'Retry' error handling strategy and 'maxRetries' and 'maxErrors' process directives
- Added GridGain cluster sub-module
- Added TaskDispatcher submit, start, complete and error listeners
- Added new ServiceDiscovery to handle sub-modules executors
- Added Map#getOrCreate() extension method
- Using @CompileStatic for AST transformation
- Removing unused APP_TMP_DIR const
- Renamed class 'AbstractExecutor' to 'Executor'
- Added ProcessFactory class
- Refactored sub-modules directory structure
- Define the default 'lib' path relative to the pipeline 'baseDir' i.e. relative to the main script location
- Save the history entry just before launch the execution

0.7.0 - 24 Mar 2014
- New self-downloadable and self-updatable script launcher
- New cluster mode, Nextflow can run as a daemon node by using Hazelcast cluster (incubating)
- New support for Docker containers. Any process can be executed through Docker adding 'container = name' in the process definition (incubating)
- New native processes (groovy closure) can executed in the cluster.
- Enhanced task polling monitor
- Use 'rsync' to upstage task result files to target directory
- Pipeline execution can be launched in background by adding the option '-bg- to the command line
- Updated documentation

0.6.2 - 20 Feb 2014
- Added 'concat' operator to concatenate two or more channels
- Added 'into(ch1,ch2...)' operator which maps tuple elements into the corresponding target channel
- Implemented queue status check for SLURM grid executor
- Implemented queue status check for LSF grid executor
- Improved grid executors stability
- Fixed a bug when setting setting the monitor queue size

0.6.1 - 16 Feb 2014
- Added operator 'cross()'
- Added operator 'collate()'
- Added options 'remainder' to 'buffer()' operator
- Added 'deep' option to cache directive in order to index file content.
- Added Kryo based serialization
- Added 'storeDir' process directive to cache process results permanently
- Added 'watch' channel factory method that watches for files changes
- Added parametric input/output file names
- Renaming "mapMany" to "flatMap"
- Enhanced stability for grid executors
- SGE executor periodically invokes the 'qstat' command to fetch the queue jobs status
- Processes and executors can be configured separately in the configuration file by using the $name special scope
- Completed Path methods extension equivalent to legacy File
- Reporting a random tip when a process fail

0.6.0 - 16 Jan 2014
- New channel factory methods
- New reactive operators on channel objects (similar to RxJava)
- New shared parameters
- New input/output set parameters
- New conditional scripts using 
- New groovy native processes   

0.5.4 - 10 Dec 2013
- Fixed an issue while checking an - empty - process exit file
- Fixed a race condition while resuming cached tasks

0.5.3 - 9 Dec 2013 
- Fixed file close leaks
- Fixed DirectoryStream close leaks
- Enhanced process executor, supporting multiple executors in the same pipeline
 
0.5.2 - 28 Nov 2013
- Changed caching hash function to murmur3_128 to avoid cache collision
- Fixed issue on process termination when resuming pipeline execution

0.5.1 - 24 Oct 2013
- Major executors refactoring
- Featuring new single-thread tasks scheduler
- New enhanced DLS syntax with extended semantic
- Switched file handling to new NIO.2 file system
- Introducing support for DNAnexus cloud platform
- Removed unnecessary library dependencies
- Slim self-contained executable package

0.3.4 - 24 Aug 2012
- Extending semantic for method File.copyTo(source,target) so that when 'target' argument 
  is a directory, it copies the 'source' file to that folder, with the same name as the original file.
- Bug: Fixed a ClassCastEx exception when the 'bin' folder is added to the PATH
- Bug: Fixed an issue that raised an error "error=26 Text file busy" on some platforms (CentOS)  

0.3.3 - 8 Aug 2013
- Added optional parameters to 'chunkLines' and 'chunkFasta' methods
- Added '-lib' command line parameter specify external libraries (.jar files) or extension scripts
- Folder 'lib' in the launch directory is added by as default libraries path
- Added 'tempFile()' and 'tempDir()' methods to BaseScript class
- The 'bin' directory in the script folder is added to the task PATH environment by default
- Upgraded to Groovy 2.1.6
- Upgraded to Slf4j 1.7.5
- Upgraded to Logback 1.0.13

0.3.2 - 22 Jul 2013
- New command line option '-log' to specify the application log file
- New command line options '-task.xxx' to task default parameters (overriding the ones in the configuration file)
- Fixed a bug which was preventing the caching mechanism to work properly
- Fixed synchronization issue caused by a miss-used CountDownLatch, replaced with a Phaser
- Fixed a bug by which cached tasks didn't print out any result when 'echo' was set
- Fixed a bug in the timezone handling in the build timestamp

0.3.1 - 18 Jul 2013
- Added command line parameter 'echo' to enable default tasks output
- Fixed an issue on merge task, when it doesn't collect any data the execution is skipped  

0.3.0 - 11 Jul 2013
- Decoupled the processing policy by the execution strategy classes 
- Normalised script level arguments so that a blank char may be used in place of the equals char
- Added a new configuration option named 'clusterOptions' where specify grid native configuration parameters
- Added a new configuration option named 'scratch' which enable/disable usage of scratch temporary folder when using cluster executors
- Enhanced implementation of LSF executor

0.2.11 - 28 May 2013
- Added 'lefTrim' and 'rightTrim' extension methods to String class
- The task script interprets correctly the 'shebang' header declaration
- The task save the command environment to a separated file, in order to simply task reproducibility and debugging

0.2.10
- Adding '-pool-size' cli option and config parameter to define size of executor threads
- Removed SGE output file
- Initial SLURM support

0.2.9 
- Adding 'test' feature

0.2.8 - 30 Apr 2013
- Improved scheduling of 'merge', there are executed like a single job
- Fixed caching for 'merge' task
- Refactored class 'TaskDef' to 'TaskRun'

0.2.7 - 25 Apr 2013
- Added 'eachWithIndex' iterator like method on dataflow channel
- Make the SGE task processor to write the output file in the job execution directory
- Renaming the CLI option -continue to -resume
- Adding File extension methods: getBaseName(), getExtension()

0.2.6 - 22 Apr 2013
- Fixed a bug on errors handling
- Added default parameters in config file
- Added Channel type
- Added cacheableDir and cacheableFile
- Upgraded to Groovy 2.1.3

0.2.5 - 19 Apr 2013
- Added LSF executor (experimental)
- Added command line option '-history'
- Added command line option '-continue' to resume the execution of an interrupted execution
- Using Non-daemon threads by default
- Refactored SGE task processor

0.2.4
- Using minimal Groovy dependencies
- SGE/OGE processor works in the scratch folder and un-stage result files when complete
- SGE/OGE handles stdin transparently

0.2.3
- Renamed 'queue' to 'channel'
- Adding a basic tasks cache mechanism
- Supporting 'shell' parameters

0.2.2 - 9 Apr 2013
- Fixed file/stream close leaks, that caused 'Too many open files' error on big pipeline execution
- Rolling log file '.nextflow.log' on startup
- CLI option 'quiet' suppress all 'info' messages
- Added 'maxDuration' and 'maxMemory' attributes to OgeTaskProcessor
- Added 'maxDuration' attribute to LocalTaskProcessor

0.2.1 - 3 Apr 2013
- Initial support for SGE/OGE grid engine

0.2.0 - 2 Apr 2012
- General improvement
- Enhanced parameters handling
- 'chunkLines' and 'chunkFasta' API extension
- 'each' iterator over dataflow queue API extension

0.1 - 25 Mar 2013
- Initial release
